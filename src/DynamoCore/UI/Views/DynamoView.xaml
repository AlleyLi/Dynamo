<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:views="clr-namespace:Dynamo.Views"
        xmlns:utilities="clr-namespace:Dynamo.Utilities"
        xmlns:sys="clr-namespace:System;assembly=mscorlib" 
        xmlns:models="clr-namespace:Dynamo.Models"
        xmlns:controls="clr-namespace:Dynamo.Controls"
        xmlns:commands="clr-namespace:Dynamo.UI.Commands"
        xmlns:service="clr-namespace:Dynamo.Services"
        xmlns:dynamo="clr-namespace:Dynamo"
        xmlns:core="clr-namespace:Dynamo.Core"
        xmlns:ui="clr-namespace:Dynamo.UI"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="Dynamo.Controls.DynamoView"
        x:Name="_this"
        Height="768" 
        Width="1024"
        Closing="WindowClosing" 
        Closed="WindowClosed"
        MinHeight="600" 
        MinWidth="800" 
        Title="Dynamo"
        AllowsTransparency="False" 
        KeyDown="DynamoView_KeyDown"
        KeyUp="DynamoView_KeyUp"
        Background="#FF353535"
        SnapsToDevicePixels="True"
        ResizeMode="CanResizeWithGrip"
        UseLayoutRounding="True"
        Cursor="/DynamoCore;component/UI/Images/pointer.cur"
        Style="{DynamicResource DynamoWindowStyle}">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}"/>
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}"/>
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.MenuStyleDictionaryUri}" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Window.InputBindings>

        <KeyBinding Key="Tab"
                                Command="{Binding DataContext.SelectNeighborsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>

        <KeyBinding Key="Delete"
                                Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="N"
                                Modifiers="Control"
                                Command="{Binding DataContext.NewHomeWorkspaceCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="N"
                                Modifiers="Control+Shift"
                                Command="{Binding DataContext.ShowNewFunctionDialogCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="R"
                                Modifiers="Control+Shift"
                                Command="{Binding DataContext.SaveRecordedCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Q"
                                Modifiers="Control+Shift"
                                Command="{Binding DataContext.InsertPausePlaybackCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Tab"
                                Command="{Binding DataContext.SelectNeighborsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>

        <KeyBinding Key="C"
                                Modifiers="Control"
                                Command="{Binding DataContext.CopyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Z"
                                Modifiers="Control"
                                Command="{Binding DataContext.UndoCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Y"
                                Modifiers="Control"
                                Command="{Binding DataContext.RedoCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="A"
                                Modifiers="Control"
                                Command="{Binding DataContext.SelectAllCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>

        <KeyBinding Key="D"
                                Modifiers="Control"
                                Command="{Binding DataContext.CurrentSpaceViewModel.NodeFromSelectionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="V"
                                Modifiers="Control"
                                Command="{Binding DataContext.PasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>

        <KeyBinding Key="G"
                                Modifiers="Control"
                                Command="{Binding DataContext.ToggleCanNavigateBackgroundCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>

        <KeyBinding Key="W"
                                Modifiers="Control"
                                Command="{Binding DataContext.AddNoteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="V"
                                Modifiers="Control"
                                Command="{Binding DataContext.PasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="S"
                                Modifiers="Control"
                                Command="{Binding DataContext.ShowSaveDialogIfNeededAndSaveResultCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="S"
                                Modifiers="Control+Shift"
                                Command="{Binding DataContext.ShowSaveDialogAndSaveResultCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="O"
                                Modifiers="Control"
                                Command="{Binding DataContext.ShowOpenDialogAndOpenResultCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="H"
                                Modifiers="Control"
                                Command="{Binding DataContext.HomeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Up"
                                Modifiers="Control+Shift"
                                Command="{Binding DataContext.ToggleConsoleShowingCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="F4"
                Modifiers="Alt"
                                Command="{Binding DataContext.ExitCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>

        <KeyBinding Key="Left"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Left"
                    Command="{Binding DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Right"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Right"
                    Command="{Binding DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Up"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Up"
                    Command="{Binding DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="Down"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Down"
                    Command="{Binding DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="OemPlus"
                    Modifiers="Ctrl"
                    Command="{Binding DataContext.ZoomInCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="OemMinus"
                    Modifiers="Ctrl"
                    Command="{Binding DataContext.ZoomOutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
        <KeyBinding Key="D0"
                    Modifiers="Ctrl"
                    Command="{Binding DataContext.FitViewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"/>
    </Window.InputBindings>

    <Grid x:Name="mainGrid" FocusManager.IsFocusScope="True" PreviewMouseDown="Window_PreviewMouseDown" PreviewMouseUp="Window_PreviewMouseUp">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition x:Name="consoleRow" Height="{Binding ConsoleHeight, Converter={StaticResource ConsoleHeightConverter}, Mode=TwoWay}"/>
            <RowDefinition Height="48"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MaxWidth="500"/>
            <!--MinWidth fix for GridSplitter dragging in frameless window-->
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width ="Auto"/>
            <ColumnDefinition Width="Auto" MaxWidth="500"/>
        </Grid.ColumnDefinitions>

        <!--Titlebar-->
        <Border BorderBrush="#FF3F4040"
            BorderThickness="0,0,0,1"
            Grid.Row="0"
            Grid.Column="0"
            Grid.ColumnSpan="5"
            Height="26"
            x:Name="titleBar">

            <Grid x:Name="titleBarGrid">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!--Menu-->
                <Menu IsMainMenu="True" x:Name="menu1" Style="{StaticResource MainMenu}">

                    <MenuItem Header="_File" x:Name="fileMenu" Focusable="False">
                        <MenuItem Header="_New" x:Name="newMenu" Focusable="False">
                            <MenuItem Header="_Home Workspace..." Command="{Binding NewHomeWorkspaceCommand}"  x:Name="newHomeWorkspace" InputGestureText="Ctrl + N" Focusable="False"/>
                            <MenuItem Header="_Custom Node..." Command="{Binding ShowNewFunctionDialogCommand}"  x:Name="newFuncButton" InputGestureText="Ctrl + Shift + N" Focusable="False"/>
                        </MenuItem>
                        <MenuItem Header="_Open..." Command="{Binding ShowOpenDialogAndOpenResultCommand}" x:Name="openButton" InputGestureText="Ctrl + O" Focusable="False">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCore;component/UI/Images/openHS.png" Width="14" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="_Save" Command="{Binding ShowSaveDialogIfNeededAndSaveResultCommand}" x:Name="saveThisButton" InputGestureText="Ctrl + S" Focusable="False">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCore;component/UI/Images/saveHS.png" Width="14" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="_Save As..." Command="{Binding ShowSaveDialogAndSaveResultCommand}" x:Name="saveButton" InputGestureText="Ctrl + Shift + S" IsEnabled="{Binding IsUILocked, Converter={StaticResource InverseBooleanConverter}}">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCore;component/UI/Images/saveHS.png" Width="14" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="_Export Workspace As Image..." Command="{Binding ShowSaveImageDialogAndSaveResultCommand}" x:Name="saveImage">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCore;component/UI/Images/screenshot_normal.png" Width="14" Height="14"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="_Export Model to STL..." Command="{Binding ExportToSTLCommand}" x:Name="saveSTL"/>
                        <Separator />
                        <MenuItem Header="_Exit" Command="{Binding ExitCommand}"  x:Name="exit" InputGestureText="Alt + F4" Focusable="False"/>
                    </MenuItem>

                    <MenuItem Header="_Edit" x:Name="editMenu" Focusable="False">
                        <MenuItem Focusable="False" Header="_Undo" Command="{Binding UndoCommand}" x:Name="undo" InputGestureText="Ctrl+Z"/>
                        <MenuItem Focusable="False" Header="_Redo" Command="{Binding RedoCommand}"  x:Name="redo" InputGestureText="Ctrl+Y"/>
                        <Separator/>
                        <MenuItem Focusable="False" Header="_Copy" Command="{Binding CopyCommand}" x:Name="copy" InputGestureText="Ctrl + C"/>
                        <MenuItem Focusable="False" Header="_Paste" Command="{Binding PasteCommand}"  x:Name="paste" InputGestureText="Ctrl + V"/>
                        <Separator/>
                        <MenuItem Focusable="False" Header="_Create Note" Command="{Binding AddNoteCommand}"  x:Name="noteMenuItem" InputGestureText="Ctrl + W" />
                        <MenuItem Focusable="False" Header="_Create Node From Selection" Command="{Binding CurrentSpaceViewModel.NodeFromSelectionCommand}"  x:Name="nodeFromSelection" InputGestureText="Ctrl + D"/>
                        <MenuItem Focusable="False" Header="_Select All" Command="{Binding SelectAllCommand}"  x:Name="selectAll" InputGestureText="Ctrl + A"/>
                        <MenuItem Focusable="False" Header="_Delete Selected" Command="{Binding DeleteCommand}"  x:Name="deleteSelected" InputGestureText="Delete"/>
                        <!--<MenuItem Focusable="False" Header="_Select Neighbors" Command="{Binding Path=ExpandSelectionCommand}"  Name="expandSelect" InputGestureText="Tab"/>-->
                        <MenuItem  Header="_Align Selection"  x:Name="Align">
                            <MenuItem  Header="_X Average"  Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalCenter" Focusable="False"/>
                            <MenuItem  Header="_Left" Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalLeft" Focusable="False"/>
                            <MenuItem  Header="_Right" Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalRight" Focusable="False"/>
                            <MenuItem  Header="_Y Average" Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalCenter" Focusable="False"/>
                            <MenuItem  Header="_Top" Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalTop" Focusable="False"/>
                            <MenuItem  Header="_Bottom" Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalBottom" Focusable="False"/>
                            <MenuItem  Header="_Y Distribute" Command="{Binding AlignSelectedCommand}" CommandParameter="VerticalDistribute" Focusable="False"/>
                            <MenuItem  Header="_X Distribute" Command="{Binding AlignSelectedCommand}" CommandParameter="HorizontalDistribute" Focusable="False"/>
                        </MenuItem>
                    </MenuItem>

                    <MenuItem Header="_View" x:Name="viewMenu" Focusable="False">
                        <MenuItem Header="_Zoom" x:Name="zoomMenu">
                            <MenuItem  Header="Zoom In (Mouse wheel down)"  Command="{Binding ZoomInCommand}" InputGestureText="Ctrl + ="/>
                            <MenuItem  Header="Zoom Out (Mouse wheel up)" Command="{Binding ZoomOutCommand}" InputGestureText="Ctrl + -"/>
                        </MenuItem>

                        <MenuItem Header="_Pan" x:Name="panMenu">
                            <MenuItem  Header="Pan Left (Mouse wheel drag left)"  Command="{Binding PanCommand}" CommandParameter="Left" InputGestureText="Ctrl + Alt + Left"/>
                            <MenuItem  Header="Pan Right (Mouse wheel drag right)" Command="{Binding PanCommand}" CommandParameter="Right" InputGestureText="Ctrl + Alt + Right"/>
                            <MenuItem  Header="Pan Up (Mouse wheel drag up)"  Command="{Binding PanCommand}" CommandParameter="Up" InputGestureText="Ctrl + Alt + Up"/>
                            <MenuItem  Header="Pan Down (Mouse wheel drag down)" Command="{Binding PanCommand}" CommandParameter="Down" InputGestureText="Ctrl + Alt + Down"/>
                        </MenuItem>

                        <MenuItem Header="{Binding ConsoleHeight, Converter={StaticResource ShowHideConsoleMenuConverter}}"
                            Command="{Binding ToggleConsoleShowingCommand}" InputGestureText="Ctrl + Shift + Up"/>

                        <MenuItem Header="_Connectors" x:Name="connectorMenu">
                            <MenuItem Focusable="False" Header="_Connector Type" IsEnabled="True">
                                <MenuItem Focusable="False" x:Name="settings_curves" IsCheckable="True" IsChecked="{Binding ConnectorType, ConverterParameter=BEZIER, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetConnectorTypeCommand}" CommandParameter="BEZIER" Header="Curves"/>
                                <MenuItem x:Name="settings_plines" IsCheckable="True" IsChecked="{Binding ConnectorType, ConverterParameter=POLYLINE, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetConnectorTypeCommand}" CommandParameter="POLYLINE" Header="Polylines"/>
                            </MenuItem>
                            <MenuItem Focusable="False" Header="_Show Connectors" IsCheckable="True" x:Name="ShowHideConnectorsMenuItem" IsChecked="{Binding IsShowingConnectors}" Command="{Binding ShowHideConnectorsCommand}"/>
                        </MenuItem>
                        <MenuItem Header ="{Binding AlternateContextGeometryDisplayText}" 
                            x:Name="showGeometryInAlternateContextMenu" 
                            Focusable="False" 
                            Visibility="{Binding Controller.VisualizationManager.AlternateDrawingContextAvailable, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, Mode=OneWay}"
                            IsCheckable="True"
                            IsChecked="{Binding Controller.VisualizationManager.DrawToAlternateContext}"/>
                        <MenuItem Header="_Background 3D Preview" x:Name="background3dMenu" Focusable="False">
                            <MenuItem Header="{Binding FullscreenWatchShowing, Converter={StaticResource ShowHideFullscreenWatchMenuConverter}}" 
                                IsChecked="{Binding FullscreenWatchShowing}" Command="{Binding ToggleFullscreenWatchShowingCommand}"  Focusable="False"/>
                            <MenuItem Header="Navigate Background 3D Preview"
                                IsEnabled="{Binding FullscreenWatchShowing}"
                                IsChecked="{Binding CanNavigateBackground}"
                                InputGestureText="Ctrl + G"
                                Focusable="False"
                                Command="{Binding ToggleCanNavigateBackgroundCommand}"/>
                        </MenuItem>
                    </MenuItem>

                    <MenuItem Header="_Libraries" x:Name="LibraryManagerMenu" Focusable="False" IsEnabled="True">
                        <MenuItem Focusable="False" Header="_Import Library (EXPERIMENTAL)..." Command="{Binding DataContext.ImportLibraryCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"  x:Name="importLibrary"/>
                    </MenuItem>

                    <MenuItem Header="_Packages" x:Name="PackageManagerMenu" Focusable="False" IsEnabled="True">
                        <MenuItem Focusable="False" Header="_Search for a Package..." Command="{Binding DataContext.ShowPackageManagerSearchCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"  x:Name="showPMSearch" />
                        <MenuItem Focusable="False" Header="_Manage Packages..." Command="{Binding DataContext.ShowInstalledPackagesCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"  x:Name="showPMInstalled" />
                        <!--<MenuItem Focusable="False" Header="_Publish Selected Nodes..." Command="{Binding Path=DataContext.PublishSelectedNodesCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"  Name="publishSelected" />-->
                        <!--<MenuItem Focusable="False" Header="_Publish Current Workspace..." Command="{Binding Path=DataContext.PublishCurrentWorkspaceCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"  Name="publishCurrent" />-->
                    </MenuItem>

                    <MenuItem Header="_Settings" x:Name="SettingsMenu" Focusable="False" IsEnabled="True">
                        <MenuItem Header="_Enable usability data reporting"
                            x:Name="ToggleIsUsageReportingApprovedCommand"
                            Command="{Binding ToggleIsUsageReportingApprovedCommand, Source={x:Static service:UsageReportingManager.Instance}}"
                            IsChecked="{Binding IsUsageReportingApproved, Mode=OneWay, Source={x:Static service:UsageReportingManager.Instance}}"
                            Focusable="False"/>
                        <MenuItem Focusable="False" Header="Length Display Units" x:Name="LengthUnitsMenu">
                            <MenuItem Focusable="False" x:Name="units_inch_1" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=DecimalInch, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="DecimalInch" Header="Decimal Inch"/>
                            <MenuItem Focusable="False" x:Name="units_inch_2" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=FractionalInch, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="FractionalInch" Header="Fractional Inch"/>
                            <MenuItem Focusable="False" x:Name="units_foot_1" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=DecimalFoot, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="DecimalFoot" Header="Decimal Foot"/>
                            <MenuItem Focusable="False" x:Name="units_foot_2" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=FractionalFoot, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="FractionalFoot" Header="Fractional Foot"/>
                            <MenuItem Focusable="False" x:Name="units_mm" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=Millimeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="Millimeter" Header="Millimeter"/>
                            <MenuItem Focusable="False" x:Name="units_cm" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=Centimeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="Centimeter" Header="Centimeter"/>
                            <MenuItem Focusable="False" x:Name="units_m" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.LengthUnit, ConverterParameter=Meter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetLengthUnitCommand}" CommandParameter="Meter" Header="Meter"/>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="Area Display Units" x:Name="AreaUnitsMenu">
                            <MenuItem Focusable="False" x:Name="units_area_inch" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.AreaUnit, ConverterParameter=SquareInch, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetAreaUnitCommand}" CommandParameter="SquareInch" Header="Square Inch"/>
                            <MenuItem Focusable="False" x:Name="units_area_foot" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.AreaUnit, ConverterParameter=SquareFoot, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetAreaUnitCommand}" CommandParameter="SquareFoot" Header="Square Foot"/>
                            <MenuItem Focusable="False" x:Name="units_area_millimeter" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.AreaUnit, ConverterParameter=SquareMillimeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetAreaUnitCommand}" CommandParameter="SquareMillimeter" Header="Square Millimeter"/>
                            <MenuItem Focusable="False" x:Name="units_area_centimeter" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.AreaUnit, ConverterParameter=SquareCentimeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetAreaUnitCommand}" CommandParameter="SquareCentimeter" Header="Square Centimeter"/>
                            <MenuItem Focusable="False" x:Name="units_area_meter" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.AreaUnit, ConverterParameter=SquareMeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetAreaUnitCommand}" CommandParameter="SquareMeter" Header="Square Meter"/>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="Volume Display Units" x:Name="VolumeUnitsMenu">
                            <MenuItem Focusable="False" x:Name="units_volume_inch" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.VolumeUnit, ConverterParameter=CubicInch, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetVolumeUnitCommand}" CommandParameter="CubicInch" Header="Cubic Inch"/>
                            <MenuItem Focusable="False" x:Name="units_volume_foot" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.VolumeUnit, ConverterParameter=CubicFoot, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetVolumeUnitCommand}" CommandParameter="CubicFoot" Header="Cubic Foot"/>
                            <MenuItem Focusable="False" x:Name="units_volume_millimeter" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.VolumeUnit, ConverterParameter=CubicMillimeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetVolumeUnitCommand}" CommandParameter="CubicMillimeter" Header="Cubic Millimeter"/>
                            <MenuItem Focusable="False" x:Name="units_volume_centimeter" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.VolumeUnit, ConverterParameter=CubicCentimeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetVolumeUnitCommand}" CommandParameter="CubicCentimeter" Header="Cubic Centimeter"/>
                            <MenuItem Focusable="False" x:Name="units_volume_meter" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.VolumeUnit, ConverterParameter=CubicMeter, Converter={StaticResource EnumToBoolConverter}, Mode=TwoWay}" Command="{Binding SetVolumeUnitCommand}" CommandParameter="SquareMeter" Header="Cubic Meter"/>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="Number Format" x:Name="NumberFormat">
                            <MenuItem Focusable="False" Header="0" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.NumberFormat, ConverterParameter=f0, Converter={StaticResource NumberFormatToBoolConverter}, Mode=TwoWay}" Command="{Binding SetNumberFormatCommand}" CommandParameter="f0"/>
                            <MenuItem Focusable="False" Header="0.0" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.NumberFormat, ConverterParameter=f1, Converter={StaticResource NumberFormatToBoolConverter}, Mode=TwoWay}" Command="{Binding SetNumberFormatCommand}" CommandParameter="f1"/>
                            <MenuItem Focusable="False" Header="0.00" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.NumberFormat, ConverterParameter=f2, Converter={StaticResource NumberFormatToBoolConverter}, Mode=TwoWay}" Command="{Binding SetNumberFormatCommand}" CommandParameter="f2"/>
                            <MenuItem Focusable="False" Header="0.000" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.NumberFormat, ConverterParameter=f3, Converter={StaticResource NumberFormatToBoolConverter}, Mode=TwoWay}" Command="{Binding SetNumberFormatCommand}" CommandParameter="f3"/>
                            <MenuItem Focusable="False" Header="0.0000" IsCheckable="True" IsChecked="{Binding Controller.PreferenceSettings.NumberFormat, ConverterParameter=f4, Converter={StaticResource NumberFormatToBoolConverter}, Mode=TwoWay}" Command="{Binding SetNumberFormatCommand}" CommandParameter="f4"/>
                        </MenuItem>
                        <MenuItem Focusable="False" Header="Render Precision">
                            <StackPanel Orientation="Horizontal" Width="Auto">
                                <TextBlock Text="Low" Margin="0,0,10,0"/>
                                <Slider Width ="100" Minimum="12" Maximum="512" Value="{Binding MaxGridLines, Mode=TwoWay}"/>
                                <TextBlock Text="High" Margin="10,0,0,0"/>
                            </StackPanel>
                        </MenuItem>
                    </MenuItem>

                    <MenuItem Header="Help" Focusable="False">
                        <MenuItem Focusable="False" Header="Samples" x:Name="SamplesMenu">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCore;component/UI/Images/OpenSelectedItemHS.png" Width="14" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="_Report A Bug" Command="{Binding ReportABugCommand}"  x:Name="bugCommand" Focusable="False"/>
                        <MenuItem Header="_Go To Project Website" Command="{Binding GoToSourceCodeCommand}"  x:Name="sourceCode" Focusable="False"/>
                        <MenuItem Header="_Go To Project Wiki" Command="{Binding GoToWikiCommand}"  x:Name="wiki" Focusable="False"/>
                        <MenuItem Header="_About..." Command="{Binding ShowAboutWindowCommand}" Focusable="False" />
                    </MenuItem>

                    <MenuItem Header="Debug" Focusable="False" Visibility="{Binding IsDebugBuild, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <MenuItem Focusable="False" x:Name="VerboseLogging" IsCheckable="True" Unchecked="VerboseLogging_OnChecked" Checked="VerboseLogging_OnChecked" Header="Verbose Logging"/>

                    </MenuItem>

                </Menu>

                <!--Titlebar buttons-->
                <Grid x:Name="titleBarButtonsGrid" Grid.Column="1"/>

            </Grid>
        </Border>

        <!--Shortcuts Toolbar-->
        <Border x:Name="shortcutBarBorder"
            Grid.Row="1"
            Grid.Column="0"
            Grid.ColumnSpan="5"
            Height="32"
            BorderBrush="#FF3F4040"
            BorderThickness="0,0,0,1">
            <Grid x:Name="shortcutBarGrid"/>
        </Border>

        <Grid HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Grid.Row="2"
            Grid.Column="2"
            Grid.RowSpan="3"
            Background="#232323" x:Name="background_grid">
            <Canvas x:Name="backgroundCanvas"
                Margin="0,20,0,0"
                ClipToBounds="True"
                IsHitTestVisible="{Binding ShouldBeHitTestVisible}">
                <Canvas.Background>
                    <SolidColorBrush Color="{Binding IsHomeSpace, Converter={StaticResource WorkspaceBackgroundColorConverter}}" />
                </Canvas.Background>
            </Canvas>
            <controls:Watch3DView Margin="0,20,0,0" x:Name="background_preview"
                                          Visibility="{Binding FullscreenWatchShowing, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                                            IsHitTestVisible="{Binding WatchPreviewHitTest}">

            </controls:Watch3DView>
        </Grid>

        <!--
            Do not style the background of this border,
            Background3DPreview controls will be blocked if you do so.
            Please ensure that mouse events will be able to pass through this layer,
            when Navigate Background 3D Preview is set to true.
        -->
        <!--Workspace-->
        <Border Margin="0" BorderBrush="Black" BorderThickness="0" x:Name="border" 
            Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="1" Grid.RowSpan="3"
            SizeChanged="Workspace_SizeChanged">

            <Grid AllowDrop="True" Drop="DynamoView_OnDrop">
                <TabControl ItemsSource="{Binding Workspaces, NotifyOnTargetUpdated=True}"
                    x:Name="WorkspaceTabs"
                    SelectedIndex="{Binding CurrentWorkspaceIndex}"
                    Background="#232323"
                    Padding="0"
                    TargetUpdated="WorkspaceTabs_TargetUpdated"
                    SelectionChanged="WorkspaceTabs_SelectionChanged"
                    SizeChanged="WorkspaceTabs_SizeChanged">

                    <TabControl.Resources>

                        <Style TargetType="{x:Type TabControl}">
                            <Setter Property="OverridesDefaultStyle"
                                Value="True" />
                            <Setter Property="SnapsToDevicePixels"
                                Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabControl}">
                                        <Grid KeyboardNavigation.TabNavigation="Local">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>
                                            <Border BorderBrush="#FF3F4040"
                                                BorderThickness="1,0,0,1"
                                                Grid.Row="0">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollViewer Grid.Column="0"
                                                        Margin="0,-1,0,0"
                                                        HorizontalScrollBarVisibility="Hidden"
                                                        VerticalScrollBarVisibility="Disabled">
                                                        <TabPanel x:Name="HeaderPanel"
                                                            IsItemsHost="True"
                                                            KeyboardNavigation.TabIndex="1"
                                                            Background="Transparent" />
                                                    </ScrollViewer>
                                                    <Menu x:Name="TabControlMenu"
                                                        Grid.Column="1"
                                                        Background="Transparent"
                                                        SnapsToDevicePixels="True">
                                                        <Menu.Resources>
                                                            <sys:Double x:Key="ButtonWidthAndHeight">19</sys:Double>
                                                            <Style x:Key="TabMenuButtonStyle"
                                                                TargetType="{x:Type MenuItem}">
                                                                <Setter Property="Focusable"
                                                                    Value="False" />
                                                                <Setter Property="Height"
                                                                    Value="{StaticResource ButtonWidthAndHeight}" />
                                                                <Setter Property="Width"
                                                                    Value="{StaticResource ButtonWidthAndHeight}" />
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type MenuItem}">
                                                                            <Border x:Name="ButtonBorder"
                                                                                Margin="0"
                                                                                Background="Transparent"
                                                                                BorderThickness="0"
                                                                                VerticalAlignment="Center"
                                                                                HorizontalAlignment="Center"
                                                                                Padding="0">
                                                                                <Grid VerticalAlignment="Center"
                                                                                    HorizontalAlignment="Center">
                                                                                    <ContentPresenter ContentSource="Header"
                                                                                        HorizontalAlignment="Center"
                                                                                        VerticalAlignment="Center" />
                                                                                    <Image x:Name="TabMenuButtonImage"
                                                                                        Width="16"
                                                                                        Height="16">
                                                                                        <Image.Style>
                                                                                            <Style TargetType="{x:Type Image}">
                                                                                                <Style.Triggers>
                                                                                                    <Trigger Property="IsMouseOver"
                                                                                                        Value="False">
                                                                                                        <Setter Property="Source"
                                                                                                            Value="/DynamoCore;component/UI/Images/tabs_button_normal.png" />
                                                                                                    </Trigger>
                                                                                                    <Trigger Property="IsMouseOver"
                                                                                                        Value="True">
                                                                                                        <Setter Property="Source"
                                                                                                            Value="/DynamoCore;component/UI/Images/tabs_button_hover.png" />
                                                                                                    </Trigger>
                                                                                                </Style.Triggers>
                                                                                            </Style>
                                                                                        </Image.Style>
                                                                                    </Image>
                                                                                    <Popup x:Name="Popup"
                                                                                        Placement="Custom"
                                                                                        CustomPopupPlacementCallback="PlacePopup"
                                                                                        IsOpen="{TemplateBinding IsSubmenuOpen}"
                                                                                        AllowsTransparency="True"
                                                                                        Focusable="False"
                                                                                        PopupAnimation="Fade">
                                                                                        <Border x:Name="SubmenuBorder"
                                                                                            SnapsToDevicePixels="True"
                                                                                            BorderBrush="{StaticResource NormalBorderBrush}"
                                                                                            Background="{StaticResource NormalBackgroundBrush}"
                                                                                            BorderThickness="1">
                                                                                            <StackPanel IsItemsHost="True"
                                                                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                                                        </Border>
                                                                                    </Popup>
                                                                                </Grid>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsHighlighted"
                                                                                    Value="true">
                                                                                    <Setter TargetName="TabMenuButtonImage"
                                                                                        Property="Source"
                                                                                        Value="/DynamoCore;component/UI/Images/tabs_button_hover.png" />
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>

                                                            <!-- The style for MenuItems that represent TabItems -->
                                                            <Style x:Key="TabMenuItem"
                                                                TargetType="{x:Type MenuItem}">

                                                                <Style.Resources>
                                                                    <!--  SubmenuHeader  -->
                                                                    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                                                                        TargetType="{x:Type MenuItem}">
                                                                        <Border x:Name="Border"
                                                                            Height="25">
                                                                            <Grid>
                                                                                <Grid.ColumnDefinitions>
                                                                                    <ColumnDefinition Width="*"
                                                                                        MinWidth="100" />
                                                                                </Grid.ColumnDefinitions>
                                                                                <ContentPresenter x:Name="HeaderHost"
                                                                                    Grid.Column="0"
                                                                                    Margin="5,0"
                                                                                    HorizontalAlignment="Stretch"
                                                                                    VerticalAlignment="Center"
                                                                                    ContentSource="Header"
                                                                                    RecognizesAccessKey="True" />
                                                                                <Popup x:Name="Popup"
                                                                                    AllowsTransparency="True"
                                                                                    Focusable="False"
                                                                                    HorizontalOffset="-2"
                                                                                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                                                                                    Placement="Left"
                                                                                    PopupAnimation="Fade">
                                                                                    <Border x:Name="SubmenuBorder"
                                                                                        Margin="0 0 5 5"
                                                                                        Background="{StaticResource NormalBackgroundBrush}"
                                                                                        BorderBrush="{StaticResource NormalBorderBrush}"
                                                                                        BorderThickness="1"
                                                                                        SnapsToDevicePixels="True">
                                                                                        <Border.Effect>
                                                                                            <DropShadowEffect BlurRadius="5"
                                                                                                Opacity="0.4"
                                                                                                ShadowDepth="3" />
                                                                                        </Border.Effect>
                                                                                        <StackPanel IsItemsHost="True"
                                                                                            KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                                                    </Border>
                                                                                </Popup>
                                                                            </Grid>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsHighlighted"
                                                                                Value="true">
                                                                                <Setter TargetName="Border"
                                                                                    Property="Background"
                                                                                    Value="{StaticResource HighlightedBrush}" />
                                                                                <Setter TargetName="HeaderHost"
                                                                                    Property="TextBlock.Foreground"
                                                                                    Value="{StaticResource ActiveForegroundBrush}" />
                                                                                <Setter TargetName="Border"
                                                                                    Property="BorderBrush"
                                                                                    Value="Transparent" />
                                                                            </Trigger>
                                                                            <Trigger Property="IsEnabled"
                                                                                Value="false">
                                                                                <Setter Property="Foreground"
                                                                                    Value="{StaticResource DisabledForegroundBrush}" />
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>

                                                                    <!--  SubmenuItem  -->
                                                                    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                                                                        TargetType="{x:Type MenuItem}">
                                                                        <Border x:Name="Border"
                                                                            Height="25">
                                                                            <Grid MinWidth="200">
                                                                                <Grid.ColumnDefinitions>
                                                                                    <ColumnDefinition Width="Auto" />
                                                                                    <ColumnDefinition Width="*" />
                                                                                </Grid.ColumnDefinitions>
                                                                                <ContentPresenter x:Name="HeaderHost"
                                                                                    Grid.Column="0"
                                                                                    Margin="5,0,0,0"
                                                                                    HorizontalAlignment="Stretch"
                                                                                    VerticalAlignment="Center"
                                                                                    ContentSource="Header"
                                                                                    RecognizesAccessKey="True" />
                                                                                <ContentPresenter x:Name="SaveStateHost"
                                                                                    Grid.Column="1"
                                                                                    Margin="0,0,5,0"
                                                                                    HorizontalAlignment="Stretch"
                                                                                    VerticalAlignment="Center"
                                                                                    ContentSource="Tag"
                                                                                    RecognizesAccessKey="True" />
                                                                            </Grid>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsHighlighted"
                                                                                Value="true">
                                                                                <Setter TargetName="Border"
                                                                                    Property="Background"
                                                                                    Value="{StaticResource HighlightedBrush}" />
                                                                                <Setter TargetName="HeaderHost"
                                                                                    Property="TextBlock.Foreground"
                                                                                    Value="{StaticResource ActiveForegroundBrush}" />
                                                                                <Setter TargetName="Border"
                                                                                    Property="BorderBrush"
                                                                                    Value="Transparent" />
                                                                            </Trigger>
                                                                            <Trigger Property="IsEnabled"
                                                                                Value="false">
                                                                                <Setter Property="Foreground"
                                                                                    Value="{StaticResource DisabledForegroundBrush}" />
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Style.Resources>

                                                                <EventSetter Event="MenuItem.Click"
                                                                    Handler="TabControlMenuItem_Click" />

                                                                <Style.BasedOn>
                                                                    <StaticResource ResourceKey="MenuItemStyle"/>
                                                                </Style.BasedOn>

                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                        Value="Unsaved">
                                                                        <Setter Property="Header"
                                                                            Value="{Binding Name}" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                        Value="Saved">
                                                                        <Setter Property="Header"
                                                                            Value="{Binding FileName, Converter={StaticResource PathToFileNameConverter}}" />
                                                                    </DataTrigger>

                                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                                        Value="True">
                                                                        <Setter Property="Tag"
                                                                            Value="*" />
                                                                    </DataTrigger>

                                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                                        Value="False">
                                                                        <Setter Property="Tag"
                                                                            Value="" />
                                                                    </DataTrigger>

                                                                    <Trigger Property="Role"
                                                                        Value="SubmenuHeader">
                                                                        <Setter Property="Template"
                                                                            Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                                                                    </Trigger>
                                                                    <Trigger Property="Role"
                                                                        Value="SubmenuItem">
                                                                        <Setter Property="Template"
                                                                            Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Menu.Resources>
                                                        <MenuItem Style="{StaticResource TabMenuButtonStyle}"
                                                            ItemsSource="{Binding Items, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}}}"
                                                            ItemContainerStyle="{StaticResource TabMenuItem}"/>
                                                    </Menu>
                                                </Grid>
                                            </Border>
                                            <Border x:Name="Border"
                                                Grid.Row="1"
                                                BorderBrush="{Binding ViewingHomespace, Converter={StaticResource WorkspaceBackgroundBrushConverter}}"
                                                BorderThickness="0,1,0,0">
                                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                    ContentSource="SelectedContent" />
                                            </Border>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style TargetType="{x:Type Button}"
                            x:Key="CloseButtonStyle">
                            <Setter Property="OverridesDefaultStyle"
                                Value="True" />
                            <Setter Property="SnapsToDevicePixels"
                                Value="true" />
                            <Setter Property="VerticalAlignment"
                                Value="Center" />
                            <Setter Property="HorizontalAlignment"
                                Value="Center" />
                            <Setter Property="Margin"
                                Value="0,0,0,0" />
                            <Setter Property="Background"
                                Value="Transparent" />
                            <Setter Property="BorderThickness"
                                Value="0" />
                            <Setter Property="Padding"
                                Value="0" />
                            <!--<EventSetter Event="Click"
                                         Handler="TabCloseButton_Click" />-->
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border x:Name="Border"
                                            Background="Transparent"
                                            BorderThickness="0 0 0 0">
                                            <ContentPresenter Margin="0 1 0 0" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                    Value="{x:Type models:HomeWorkspaceModel}">
                                    <Setter Property="Visibility"
                                        Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>

                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="MaxWidth"
                                Value="{Binding Source={x:Static ui:Configurations.TabDefaultWidth}}" />
                            <Setter Property="Width">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource TabSizeConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type TabControl}, Mode=FindAncestor}" />
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type TabControl}, Mode=FindAncestor}"
                                            Path="ActualWidth" />
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type TabControl}, Mode=FindAncestor}"
                                            Path="Items.Count" />
                                        <!--<Binding Path="Visibility" />-->
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabItem}">
                                        <Border x:Name="Border"
                                            BorderBrush="#FF3F4040"
                                            CornerRadius="0,0,0,0">
                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Style.Triggers>
                                                        <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True">
                                                            <Setter Property="Background" Value="{Binding IsHomeSpace, Converter={StaticResource WorkspaceBackgroundBrushConverter}}"/>
                                                            <Setter Property="BorderThickness" Value="1,0,1,1"/>
                                                        </DataTrigger>-->
                                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}, Mode=FindAncestor}}"
                                                            Value="False">
                                                            <Setter Property="Background"
                                                                Value="{StaticResource WorkspaceTabBorderSelectedFalse}" />
                                                            <Setter Property="BorderThickness"
                                                                Value="0,1,1,0" />
                                                            <Setter Property="Margin"
                                                                Value="0,0,0,-1" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}, Mode=FindAncestor}}"
                                                            Value="True">
                                                            <Setter Property="Background"
                                                                Value="{StaticResource WorkspaceTabBorderSelectedTrue}" />
                                                            <Setter Property="BorderThickness"
                                                                Value="0,0,1,0" />
                                                            <Setter Property="Margin"
                                                                Value="0" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                            <Grid Margin="0,0,0,0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <ContentPresenter x:Name="ContentSite"
                                                    Grid.Column="0"
                                                    VerticalAlignment="Center"
                                                    ContentSource="Header"
                                                    HorizontalAlignment="Left" />
                                                <Button Style="{StaticResource CloseButtonStyle}"
                                                    Command="{Binding HideCommand}"
                                                    Grid.Column="1">
                                                    <Image Width="16"
                                                        Height="16">
                                                        <Image.Style>
                                                            <Style TargetType="{x:Type Image}">
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver"
                                                                        Value="False">
                                                                        <Setter Property="Source"
                                                                            Value="/DynamoCore;component/UI/Images/closetab_normal.png" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver"
                                                                        Value="True">
                                                                        <Setter Property="Source"
                                                                            Value="/DynamoCore;component/UI/Images/closetab_hover.png" />
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                            </Grid>
                                        </Border>

                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                    </TabControl.Resources>

                    <TabControl.ItemTemplate>

                        <DataTemplate>

                            <!--<Button>

                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <ContentPresenter Content="{TemplateBinding Content}"/>
                                </ControlTemplate>
                            </Button.Template>

                            <Button.InputBindings>
                                <MouseBinding Gesture="MiddleClick" Command="{Binding HideCommand}" />
                            </Button.InputBindings>-->

                            <Grid Height="20">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <TextBlock x:Name="WorkspaceName"
                                    Margin="8,0,0,0"
                                    Padding="0,0,0,0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    TextTrimming="CharacterEllipsis">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers>

                                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}, Mode=FindAncestor}}"
                                                    Value="True">
                                                    <Setter Property="Foreground"
                                                        Value="{StaticResource WorkspaceTabHeaderActiveTextBrush}"/>
                                                    <Setter Property="FontWeight"
                                                        Value="SemiBold" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}, Mode=FindAncestor}}"
                                                    Value="False">
                                                    <Setter Property="Foreground"
                                                        Value="{StaticResource WorkspaceTabHeaderInactiveTextBrush}"/>
                                                    <Setter Property="FontWeight"
                                                        Value="Normal" />
                                                </DataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                            Value="{x:Type models:HomeWorkspaceModel}" />
                                                        <Condition Binding="{Binding FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                            Value="Unsaved" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text"
                                                        Value="Home" />
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                            Value="{x:Type models:HomeWorkspaceModel}" />
                                                        <Condition Binding="{Binding FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                            Value="Saved" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text"
                                                        Value="{Binding FileName, Converter={StaticResource PathToFileNameConverter}}" />
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                            Value="{x:Type models:CustomNodeWorkspaceModel}" />
                                                        <Condition Binding="{Binding FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                            Value="Unsaved" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text"
                                                        Value="{Binding Name}" />
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                            Value="{x:Type models:CustomNodeWorkspaceModel}" />
                                                        <Condition Binding="{Binding FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                            Value="Saved" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text"
                                                        Value="{Binding FileName, Converter={StaticResource PathToFileNameConverter}}" />
                                                </MultiDataTrigger>

                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBlock x:Name="WorkspaceSaveState"
                                    Grid.Column="1"
                                    Margin="0,0,0,0"
                                    VerticalAlignment="Center">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}, Mode=FindAncestor}}"
                                                    Value="True">
                                                    <Setter Property="Foreground"
                                                        Value="{StaticResource WorkspaceTabHeaderActiveTextBrush}"/>
                                                    <Setter Property="FontWeight"
                                                        Value="SemiBold" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}, Mode=FindAncestor}}"
                                                    Value="False">
                                                    <Setter Property="Foreground"
                                                        Value="{StaticResource WorkspaceTabHeaderInactiveTextBrush}"/>
                                                    <Setter Property="FontWeight"
                                                        Value="Normal" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                    Value="True">
                                                    <Setter Property="Text"
                                                        Value="*" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                    Value="False">
                                                    <Setter Property="Text"
                                                        Value="" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                            <!--</Button>-->

                        </DataTemplate>

                    </TabControl.ItemTemplate>

                    <TabControl.ContentTemplate>
                        <DataTemplate>
                            <views:dynWorkspaceView/>
                        </DataTemplate>
                    </TabControl.ContentTemplate>

                </TabControl>
                <Grid x:Name="InfoBubbleGrid"
                    VerticalAlignment="Top"
                    HorizontalAlignment="Left" />
            </Grid>

        </Border>

        <!--Collapsed Sidebar-->
        <StackPanel Grid.Row="2"
            Grid.Column="2"
            Orientation="Vertical"
            x:Name="CollapsedLeftSidebar"
            Width="Auto"
            Height="Auto"
            Background="#222222"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Margin="0,120,0,0"
            Visibility="Hidden">

            <StackPanel.RenderTransform>
                <RotateTransform Angle="-90"/>
            </StackPanel.RenderTransform>
            <Grid Background="#222222" Cursor="Hand">
                <Button Click="Button_Click" Template="{DynamicResource BackgroundButton}">
                    <Button.Resources>
                        <ControlTemplate x:Key="BackgroundButton" TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderThickness="0" BorderBrush="Black" VerticalAlignment="Stretch" Padding="5,0,5,0">
                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Border>
                        </ControlTemplate>
                    </Button.Resources>
                    <Grid Mouse.MouseEnter="Button_MouseEnter" Mouse.MouseLeave="Button_MouseLeave">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="1" Source="/DynamoCore;component/UI/Images/expand_normal.png" Visibility="Visible" Width="20" Height="20" RenderTransformOrigin="0.5, 0.5">
                            <Image.RenderTransform>
                                <RotateTransform Angle="90"/>
                            </Image.RenderTransform>
                        </Image>
                        <TextBlock Grid.Column="0" VerticalAlignment="Stretch" Foreground="#aaaaaa" FontWeight="Normal" Margin="5 0 5 0" ><Run Text="Library"/></TextBlock>
                    </Grid>
                </Button>
            </Grid>

        </StackPanel>

        <!--Collapsed Sidebar-->
        <StackPanel Grid.Row="2"
            Grid.Column="2"
            Orientation="Vertical"
            x:Name="CollapsedRightSidebar"
            Width="Auto"
            Height="Auto"
            Background="#222222"
            HorizontalAlignment="Right"
            VerticalAlignment="Bottom"
            Margin="0,0,-76,0"
            Visibility="Visible">

            <StackPanel.RenderTransform>
                <RotateTransform Angle="-90"/>
            </StackPanel.RenderTransform>
            <Grid Background="#222222" Cursor="Hand">
                <Button Click="AttributesButton_Click" Template="{DynamicResource BackgroundButton}">
                    <Button.Resources>
                        <ControlTemplate x:Key="BackgroundButton" TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderThickness="0" BorderBrush="Black" VerticalAlignment="Stretch" Padding="5,0,5,0">
                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </Border>
                        </ControlTemplate>
                    </Button.Resources>
                    <Grid Mouse.MouseEnter="Button_MouseEnter" Mouse.MouseLeave="Button_MouseLeave">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="1" Source="/DynamoCore;component/UI/Images/expand_normal.png" Visibility="Visible" Width="20" Height="20" RenderTransformOrigin="0.5, 0.5">
                            <Image.RenderTransform>
                                <RotateTransform Angle="-90"/>
                            </Image.RenderTransform>
                        </Image>
                        <TextBlock Grid.Column="0" VerticalAlignment="Stretch" Foreground="#aaaaaa" FontWeight="Normal" Margin="5 0 5 0" ><Run Text="Attributes"/></TextBlock>
                    </Grid>
                </Button>
            </Grid>

        </StackPanel>

        <ScrollViewer x:Name="LogScroller" 
            VerticalAlignment="Stretch"
            VerticalScrollBarVisibility="Auto" 
            HorizontalAlignment="Stretch"
            HorizontalScrollBarVisibility="Hidden"
            Background="Black" 
            Opacity="1" 
            Visibility="Visible"
            Grid.Row="4"
            Grid.Column="0" 
            Grid.ColumnSpan="5">

            <ScrollViewer.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Clear" Command="{Binding ClearLogCommand}"/>
                </ContextMenu>
            </ScrollViewer.ContextMenu>

            <TextBox Text="{Binding LogText, Mode=OneWay}" 
                Foreground="#FF888888" BorderThickness="0" BorderBrush="#00000000" Background="Black"
                Margin="0" TextWrapping="Wrap"
                IsReadOnly="True" IsReadOnlyCaretVisible="True" IsUndoEnabled="False" 
                IsTabStop="False" FontFamily="Consolas" TextChanged="TextBoxBase_OnTextChanged" />
        </ScrollViewer>

        <!--Sidebar-->
        <Grid Height="Auto" Width="Auto" HorizontalAlignment="Stretch" x:Name="LeftSidebarGrid" VerticalAlignment="Stretch" Visibility="Visible" 
            Grid.Row="2" Grid.Column="0" Grid.RowSpan="2" Background="Black"/>

        <Grid Height="Auto" Width="Auto" HorizontalAlignment="Stretch" x:Name="RightSidebarGrid" VerticalAlignment="Stretch" Visibility="Collapsed" 
            Grid.Row="2" Grid.Column="4" Grid.RowSpan="2" Background="Black"/>

        <WrapPanel Orientation="Horizontal" Grid.Row="5" Grid.Column="0" Grid.RowSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
            Grid.ColumnSpan="5">

            <WrapPanel.Background>
                <LinearGradientBrush  StartPoint="0.5,0"
                    EndPoint="0.5,1">
                    <GradientStop Color="#222"
                        Offset="0.0" />
                    <GradientStop Color="#111"
                        Offset="1.0" />
                </LinearGradientBrush>
            </WrapPanel.Background>

            <Grid x:Name="bottomBarGrid" Grid.Row="4" Grid.Column="0" Grid.RowSpan="1" Grid.ColumnSpan="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <WrapPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0" Grid.RowSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.ColumnSpan="1">

                    <Button x:Name="RunButton" Width="100" Content="Run" 
                        Margin="5" Style="{DynamicResource ResourceKey=STextButton}" 
                        Click="RunButton_OnClick"
                        Command="{Binding RunExpressionCommand}"
                        CommandParameter="{Binding RunInDebug}"
                        IsEnabled="{Binding RunEnabled, Mode=TwoWay}" Focusable="False"/>


                    <Button x:Name="ForceRunButton" Width="150" Content="Force ReExec" 
                        Margin="5" Style="{DynamicResource ResourceKey=STextButton}" 
                        Click="RunButton_OnClick"
                        Command="{Binding ForceRunExpressionCommand}"
                        CommandParameter="{Binding RunInDebug}"
                        IsEnabled="{Binding RunEnabled, Mode=TwoWay}" Focusable="False"/>



                    <Button x:Name="cancelButton" Width="100" Content="Cancel" Focusable="False" Style="{DynamicResource ResourceKey=STextButton}" 

                        Command="{Binding CancelRunCommand}" Margin="5"/>

                    <CheckBox Margin="10"
                        x:Name="dynamicCheckBox" x:FieldModifier="public" Focusable="False" Foreground="Gray"
                        Content="Run Automatically" FontSize="11" IsChecked="{Binding DynamicRunEnabled, Mode=TwoWay}"
                        IsEnabled="{Binding CanRunDynamically, Mode=OneWay}"
                        VerticalAlignment="Center" VerticalContentAlignment="Center"/>

                    <!--CheckBox Margin="10" x:FieldModifier="public" Name="debugCheckBox" 
                      FontSize="11" VerticalAlignment="Center" Foreground="Gray"
                      IsChecked="{Binding Path=RunInDebug, Mode=TwoWay}" Focusable="False"
                      Content="Debug" VerticalContentAlignment="Center"/-->

                </WrapPanel>
                <TextBlock x:Name="warningText" Grid.Column="1" Text="{Binding Warning, Mode=OneWay, NotifyOnTargetUpdated=True, Source={x:Static utilities:dynSettings.DynamoLogger}, UpdateSourceTrigger=PropertyChanged}" FontStyle="Italic" FontSize="12" 
                    VerticalAlignment="Center" HorizontalAlignment="Stretch" TextAlignment="Right" TextTrimming="WordEllipsis" Margin="10"
                    Foreground="{Binding WarningLevel, Converter={StaticResource WarningLevelToColorConverter}, Mode=OneWay, Source={x:Static utilities:dynSettings.DynamoLogger}, UpdateSourceTrigger=PropertyChanged}" >
                    <TextBlock.Triggers>
                        <EventTrigger RoutedEvent="Binding.TargetUpdated">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0" />
                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.35" />
                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:5" />
                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:5.35" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </TextBlock.Triggers>
                </TextBlock>
            </Grid>

        </WrapPanel>

        <Canvas HorizontalAlignment="Stretch"
            Margin="0,20,0,0"
            Grid.Row="2"
            Grid.Column="0"
            Grid.RowSpan="3"
            Grid.ColumnSpan="5"
            x:Name="overlayCanvas" 
            VerticalAlignment="Stretch" 
            Width="Auto" 
            IsHitTestVisible="{Binding IsUILocked}" 
            PreviewMouseMove="OverlayCanvas_OnMouseMove"
            Visibility="Visible" 
            Cursor="{Binding IsUILocked, Converter={StaticResource BoolToCanvasCursorConverter}}"
            ForceCursor="{Binding IsUILocked}"/>

        <GridSplitter ResizeDirection="Rows" 
            Grid.Column="2" 
            Grid.ColumnSpan="1"
            Grid.Row="3" 
            Grid.RowSpan="1"
            Width="Auto"
            Height="2" 
            x:Name="horizontalSplitter"
            HorizontalAlignment="Stretch" 
            VerticalAlignment="Stretch" 
            Margin="0" Background="#999"
            Cursor="/DynamoCore;component/UI/Images/resize_vertical.cur"/>

        <GridSplitter ResizeDirection="Auto" 
            Grid.Column="1" 
            Grid.Row="2"
            Grid.RowSpan="2"
            Height="Auto"
            Width="3"
            x:Name="LeftSidebarSplitter"
            HorizontalAlignment="Stretch" 
            VerticalAlignment="Stretch" 
            Margin="0" Background="Transparent"
            Cursor="/DynamoCore;component/UI/Images/resize_horizontal.cur"/>

        <GridSplitter ResizeDirection="Auto" 
            Grid.Column="3" 
            Grid.Row="2"
            Grid.RowSpan="2"
            Height="Auto"
            Width="3"
            x:Name="RightSidebarSplitter"
            HorizontalAlignment="Stretch" 
            VerticalAlignment="Stretch" 
            Margin="0" Background="Transparent"
            Visibility="Collapsed"
            Cursor="/DynamoCore;component/UI/Images/resize_horizontal.cur"/>

    </Grid>


</Window>
